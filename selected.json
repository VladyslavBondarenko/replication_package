[
    "Classifying software changes: Clean or buggy?",
    "A large-scale empirical study of just-in-time quality assurance",
    "Dealing with noise in defect prediction",
    "Automatic identification of bug-introducing changes",
    "Reducing features to improve code change-based bug prediction",
    "Revisiting common bug prediction findings using effort-aware models",
    "Personalized defect prediction",
    "How long did it take to fix bugs?",
    "Online defect prediction for imbalanced data",
    "On the\" naturalness\" of buggy code",
    "When does a refactoring induce bugs? an empirical study",
    "Do time of day and developer experience affect commit bugginess?",
    "Studying just-in-time defect prediction using cross-project models",
    "BugCache for inspections: hit or miss?",
    "An empirical study of just-in-time defect prediction using cross-project models",
    "Comparing static bug finders and statistical prediction",
    "Effort-aware just-in-time defect prediction: simple unsupervised models could be better than supervised models",
    "Bug prediction based on fine-grained module histories",
    "Szz revisited: verifying when changes induce fixes",
    "Locus: Locating bugs from software changes",
    "A framework for evaluating the results of the szz approach for identifying bug-introducing changes",
    "Fault detection and prediction in an open-source software project",
    "Training on errors experiment to detect fault-prone software modules by spam filter",
    "Examining the impact of self-admitted technical debt on software quality",
    "Are fix-inducing changes a moving target? a longitudinal case study of just-in-time defect prediction",
    "Predicting software defects with causality tests",
    "Micro pattern evolution",
    "Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the szz algorithm",
    "An automatic method for assessing the versions affected by a vulnerability",
    "HATARI: raising risk awareness",
    "Studying high impact fix-inducing changes",
    "Mining software repositories for accurate authorship",
    "Correlations between bugginess and time-based commit characteristics",
    "Why software repositories are not used for defect-insertion circumstance analysis more often: A case study",
    "Buginnings: identifying the origins of a bug",
    "The technical debt dataset",
    "Comparing text‐based and dependence‐based approaches for determining the origins of bugs",
    "Automatic recovery of root causes from bug-fixing changes",
    "SZZ unleashed: an open implementation of the SZZ algorithm-featuring example usage in a study of just-in-time bug prediction for the jenkins project",
    "An empirical study on developer‐related factors characterizing fix‐inducing commits",
    "What if a bug has a different origin? making sense of bugs without an explicit bug introducing change",
    "Automatically identifying code features for software defect prediction: Using ast n-grams",
    "A systematic data collection procedure for software defect prediction",
    "On the role of developer's scattered changes in bug prediction",
    "Investigating the relation between lexical smells and change-and fault-proneness: an empirical study",
    "An empirical study of crash-inducing commits in mozilla firefox",
    "Are developers fixing their own bugs?: Tracing bug-fixing and bug-seeding committers",
    "Are sonarqube rules inducing bugs?",
    "Do more experienced developers introduce fewer bugs?",
    "The impact of changes mislabeled by szz on just-in-time defect prediction",
    "Empirical evaluation of hunk metrics as bug predictors",
    "A heuristic rule reduction approach to software fault-proneness prediction",
    "Assessing refactoring instances and the maintainability benefits of them from version archives",
    "To what extent could we detect field defects? An extended empirical study of false negatives in static bug-finding tools",
    "How much time did it take to notify a Bug? Two case studies: ElasticSearch and Nova",
    "How bugs are born: a model to identify how bugs are introduced in software components",
    "Identifying static analysis techniques for finding non-fix hunks in fix revisions",
    "Fuzzy fine-grained code-history analysis",
    "Learning to generate corrective patches using neural machine translation",
    "Effort-aware and just-in-time defect prediction with neural network",
    "Performance of defect prediction in rapidly evolving software",
    "Exploring and exploiting the correlations between bug-inducing and bug-fixing commits",
    "Exploiting abstract syntax trees to locate software defects",
    "Revisiting and improving szz implementations",
    "Characterizing and identifying reverted commits",
    "Issues with SZZ: An empirical assessment of the state of practice of defect prediction data collection",
    "The smartshark ecosystem for software repository mining",
    "Identifying bug-inducing changes for code additions",
    "Getting defect prediction into industrial practice: the elff tool",
    "How often do single-statement bugs occur? The ManySStuBs4J dataset",
    "Entropy guided spectrum based bug localization using statistical language model",
    "Supporting code review by automatic detection of potentially buggy changes",
    "Extracting and studying the Logging-Code-Issue-Introducing changes in Java-based large-scale open source software systems",
    "A preliminary evaluation of text-based and dependency-based techniques for determining the origins of bugs",
    "Better data labelling with emblem (and how that impacts defect prediction)",
    "Large-scale manual validation of bugfixing changes",
    "Snoring: a noise in defect prediction datasets",
    "Are Code smells the root cause of faults? A continuous experimentation approach",
    "Identifying Supplementary Bug-fix Commits",
    "Why Did This Reviewed Code Crash? An Empirical Study of Mozilla Firefox",
    "Feature-oriented defect prediction",
    "SZZ Unleashed: Bug Prediction on the Jenkins Core Repository (Open Source Implementations of Bug Prediction Tools on Commit Level)",
    "Locating Bug IDs and Development Logs in Open Source Software (OSS) projects: An Experience Report",
    "On the relationship between refactoring actions and bugs: a differentiated replication",
    "Automatic Recovery of Root Causes from Bug-Fixing Changes.(2013)",
    "IMPROVING SOFTWARE QUALITY WITH SOFTWARE ERROR PREDICTION",
    "What could the source code history tell UsAbout errors",
    "Evaluation of Attention Mechanisms for Just-In-Time Software Defect Prediction",
    "Cross-Sub-Project Just-in-Time Defect Prediction on Multi-Repo Projects",
    "Fault-insertion and fault-fixing: analysing developer activity over time",
    "Analyzing how the bugs are injected into the source code.",
    "The Relation of Test-Related Factors to Software Quality: A Case Study on Apache Systems",
    "How (Not) to Find Bugs: The Interplay Between Merge Conflicts, Co-Changes, and Bugs",
    "Towards an Empirical Model to Identify When Bugs are Introduced",
    "Finding bugs in source code using commonly available development metadata",
    "BugVis: Commit Slicing for Fault Visualisation",
    "Investigating the Practicality of Just-in-time Defect Prediction with Semi-supervised Learning on Industrial Commit Data",
    "Large-Scale Manual Validation of Bug Fixing Commits: A Fine-grained Analysis of Tangling",
    "Evaluating SZZ Implementations Through a Developer-informed Oracle",
    "Analyzing Corrective Maintenance using Change Coupled Clusters at Fix-inducing Changes",
    "OpenSZZ: A Free, Open-Source, Web-Accessible Implementation of the SZZ Algorithm",
    "Static source code metrics and static analysis warnings for fine-grained just-in-time defect prediction",
    "Assessing the Bug-Proneness of Refactored Code: Longitudinal Multi-Project Studies",
    "Investigating the Techniques to Detect and Reduce Bug Inducing Commits During Change Operations in Software Systems",
    "Watch out for Extrinsic Bugs! A Case Study of their Impact in Just-In-Time Bug Prediction Models on the OpenStack project",
    "Effort-aware just-in-time defect identification in practice: a case study at Alibaba",
    "On the Fault Proneness of SonarQube Technical Debt Violations: A comparison of eight Machine Learning Techniques.",
    "A dynamical quality model to continuously monitor software maintenance",
    "Fault Aware Software Engineering (FASE) Reducing Code Faults by Controlling Developer Characteristics",
    "Enhancing the SZZ Algorithm to Deal with Refactoring Changes",
    "Improving the quality of bug data in software repositories",
    "Research on Software Project Developer Behaviors with K-means Clustering Analysis",
    "CLEVER: combining code metrics with clone detection for just-in-time fault prevention and resolution in large industrial projects",
    "Broadcast vs. unicast review technology: Does it matter?",
    "JITO: a tool for just-in-time defect identification and localization",
    "Predicting risk of pre-release code changes with checkinmentor",
    "Towards surgically-precise technical debt estimation: early results and research roadmap",
    "On the Impact of Multi-language Development in Machine Learning Frameworks",
    "Performance tuning for automotive software fault prediction",
    "Does chronology matter in JIT defect prediction? A Partial Replication Study",
    "Test-related factors and post-release defects: an empirical study",
    "HASPO: Harmony Search-Based Parameter Optimization for Just-in-Time Software Defect Prediction in Maritime Software",
    "Why Security Defects Go Unnoticed during Code Reviews? A Case-Control Study of the Chromium OS Project",
    "Machine Learning and SonarQube KPIs to Predict Increasing Bug Resolution Times",
    "A Multi-source Machine Learning Approach to Predict Defect Prone Components.",
    "Fault Prediction in Android Systems through AI",
    "How Well Just-In-Time Defect Prediction Techniques Enhance Software Reliability?",
    "Review dynamics and their impact on software quality",
    "Learning GENERAL Principles from Hundreds of Software Projects",
    "Just-in-time defect identification and localization: A two-phase framework",
    "On the Fault Proneness of SonarQube Technical Debt Violations. An empirical study",
    "Source code quality in connection to self-admitted technical debt",
    "A Strategy for Cross-Project Defect Prediction Models in Industry",
    "WARNINGSGURU-Analysing historical commits, augmenting software bug prediction models with warnings and a user study",
    "PerfJIT: Test-level Just-in-time Prediction for Performance Regression Introducing Commits",
    "Improving Bug Triaging Using Software Analytics",
    "On the Impact of Affect in Software Engineering",
    "Linguistic Anti-Patterns: Impact Analysis on Code Quality",
    "Are Bug Reports Enough for Text Retrieval-Based Bug Localization?",
    "Defects4J: A Database of Existing Faults to Enable Controlled Testing Studies for Java Programs",
    "BugsJS: a Benchmark of JavaScript Bugs",
    "The ManyBugs and IntroClass Benchmarks for Automated Repair of C Programs",
    "BugSwarm: Mining and Continuously Growing a Dataset of Reproducible Failures and Fixes"
]