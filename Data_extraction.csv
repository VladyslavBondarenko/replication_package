Title;Authors;Introduced open-source SZZ implementation name;Open-source SZZ implementation used;Introduced new benchmark dataset;Link to the benchmark dataset used
Classifying software changes: Clean or buggy?;S Kim, EJ Whitehead, Y Zhang;;;;
A large-scale empirical study of just-in-time quality assurance;Y Kamei, E Shihab, B Adams;ASZZ;;;
Automatic identification of bug-introducing changes;S Kim, T Zimmermann;Annotation graph SZZ;;;
Reducing features to improve code change-based bug prediction;S Shivaji, EJ Whitehead, R Akella;;;;
Revisiting common bug prediction findings using effort-aware models;Y Kamei, S Matsumoto, A Monden;;;;
Personalized defect prediction;L Tan, S Kim;;;;
How long did it take to fix bugs?;S Kim, EJ Whitehead Jr;;;;
Online defect prediction for imbalanced data;L Tan, S Dara;;;;
On the naturalness of buggy code;B Ray, V Hellendoorn, Z Tu;;;;
When does a refactoring induce bugs? an empirical study;G Bavota, A De Lucia;;;;
Do time of day and developer experience affect commit bugginess?;J Eyolfson, L Tan, P Lam;;;;
Bug prediction based on fine-grained module histories;H Hata, O Mizuno;;;;
Studying just-in-time defect prediction using cross-project models;Y Kamei, S McIntosh;;;;
BugCache for inspections: hit or miss?;F Rahman, A Hindle, E Barr;;;;
An empirical study of just-in-time defect prediction using cross-project models;Y Kamei, S McIntosh;;;;
Comparing static bug finders and statistical prediction;F Rahman, ET Barr, P Devanbu;;;;
Effort-aware just-in-time defect prediction: simple unsupervised models could be better than supervised models;Y Yang;;;;
Szz revisited: verifying when changes induce fixes;J Spacco;;;;
Locus: Locating bugs from software changes;M Wen, R Wu, SC Cheung;Locus;https://github.com/justinwm/Locus/;;https://github.com/justinwm/InduceBenchmark
A framework for evaluating the results of the szz approach for identifying bug-introducing changes;DA Da Costa, S McIntosh, W Shang;B-SZZ, AG-SZZ, MA-SZZ, R-SZZ, L-SZZ;https://github.com/danielcalencar/ra-szz, https://github.com/danielcalencar/ma-szz,https://github.com/danielcalencar/raszzprime;;
Fault detection and prediction in an open-source software project;M English, C Exton, B Cleary;;;;
Examining the impact of self-admitted technical debt on software quality;S Wehaibi, E Shihab, L Guerrouj;;;;
Are fix-inducing changes a moving target? a longitudinal case study of just-in-time defect prediction;S McIntosh, Y Kamei;;;;
Training on errors experiment to detect fault-prone software modules by spam filter;O Mizuno;;;;
Predicting software defects with causality tests;MT Valente, RS Bigonha;;;;
Micro pattern evolution;S Kim, EJ Whitehead Jr;;;;
Reproducibility and credibility in empirical software engineering: A case study based on a systematic literature review of the use of the szz algorithm;G Rodríguez-Pérez, G Robles;;;;
An automatic method for assessing the versions affected by a vulnerability;S Dashevskyi, F Massacci;;;;
HATARI: raising risk awareness;T Zimmermann, A Zeller;;;;
Studying high impact fix-inducing changes;E Shihab, Y Kamei;;;;
Mining software repositories for accurate authorship;X Meng, BP Miller, WR Williams;;;;
Correlations between bugginess and time-based commit characteristics;J Eyolfson, L Tan, P Lam;;;;
Why software repositories are not used for defect-insertion circumstance analysis more often: A case study;L Prechelt;;;;
Buginnings: identifying the origins of a bug;S Sinha;;;;
The technical debt dataset;V Lenarduzzi, N Saarimäki, D Taibi;;https://github.com/clowee/OpenSZZ;;
Comparing text‐based and dependence‐based approaches for determining the origins of bugs;M Roper;;;;
Automatic recovery of root causes from bug-fixing changes;F Thung, D Lo, L Jiang;;;;
SZZ unleashed: an open implementation of the SZZ algorithm-featuring example usage in a study of just-in-time bug prediction for the jenkins project;M Borg;SZZ Unleashed;https://github.com/wogscpar/SZZUnleashed;;
An empirical study on developer‐related factors characterizing fix‐inducing commits;M Tufano, G Bavota, D Poshyvanyk;Unnamed;https://github.com/swatlab/crash-inducing;;
What if a bug has a different origin? making sense of bugs without an explicit bug introducing change;G Rodríguez-Pérez, A Zaidman, A Serebrenik;;;;
Automatically identifying code features for software defect prediction: Using ast n-grams;T Shippey, D Bowes, T Hall;;;;
A systematic data collection procedure for software defect prediction;G Mauša, T Galinac-Grbac;;;;
On the role of developer's scattered changes in bug prediction;D Di Nucci, F Palomba;;;;
Investigating the relation between lexical smells and change-and fault-proneness: an empirical study;L Guerrouj, Z Kermansaravi, V Arnaoudova;;;;
An empirical study of crash-inducing commits in mozilla firefox;L An, F Khomh, YG Guéhéneuc;unnamed;https://github.com/swatlab/crash-inducing;;
Are developers fixing their own bugs?: Tracing bug-fixing and bug-seeding committers;D Izquierdo-Cortazar, A Capiluppi;;;;
Are sonarqube rules inducing bugs?;V Lenarduzzi, F Lomio, H Huttunen;;;;
Do more experienced developers introduce fewer bugs?;D Izquierdo-Cortázar, G Robles;;;;
The impact of changes mislabeled by szz on just-in-time defect prediction;Y Fan, X Xia, DA Da Costa, D Lo;;https://github.com/danielcalencar/ra-szz, https://github.com/danielcalencar/ma-szz;;
A heuristic rule reduction approach to software fault-proneness prediction;A Monden, J Keung, S Morisaki;;;;
Empirical evaluation of hunk metrics as bug predictors;J Ferzund, SN Ahsan, F Wotawa;;;;
Assessing refactoring instances and the maintainability benefits of them from version archives;K Fujiwara, N Yoshida;;;;
To what extent could we detect field defects? An extended empirical study of false negatives in static bug-finding tools;F Thung, D Lo, L Jiang, F Rahman;;;;
How much time did it take to notify a Bug? Two case studies: ElasticSearch and Nova;G Rodriguez-Perez, G Robles;;;;
How bugs are born: a model to identify how bugs are introduced in software components;G Rodríguez-Pérez, G Robles, A Serebrenik;;;;
Identifying static analysis techniques for finding non-fix hunks in fix revisions;Y Jung, H Oh, K Yi;;;;
Fuzzy fine-grained code-history analysis;F Servant, JA Jones;;;;
Learning to generate corrective patches using neural machine translation;H Hata, E Shihab, G Neubig;;;;
Effort-aware and just-in-time defect prediction with neural network;Lei Qiao,Yan Wang;;;;
Performance of defect prediction in rapidly evolving software;DG Cavezza, R Pietrantuono;;;;
Exploring and exploiting the correlations between bug-inducing and bug-fixing commits;M Wen, R Wu, Y Liu, Y Tian;;;;
Exploiting abstract syntax trees to locate software defects;TJ Shippey;;;;
Revisiting and improving szz implementations;DA da Costa;;https://github.com/danielcalencar/ra-szz, https://github.com/danielcalencar/ma-szz;;
Characterizing and identifying reverted commits;M Yan, X Xia, D Lo, AE Hassan;;;;
Issues with SZZ: An empirical assessment of the state of practice of defect prediction data collection;S Herbold, A Trautsch, F Trautsch, B Ledel;;;;
The smartshark ecosystem for software repository mining;A Trautsch, F Trautsch, S Herbold, B Ledel;SmartSHARK;https://github.com/smartshark/inducingSHARK;;
Identifying bug-inducing changes for code additions;A Tosun;;;;
Getting defect prediction into industrial practice: the elff tool;D Bowes, S Counsell, T Hall, J Petric;ELFF;;;
How often do single-statement bugs occur? The ManySStuBs4J dataset;RM Karampatsis, C Sutton;;;;
Entropy guided spectrum based bug localization using statistical language model;S Chakraborty, R Saha, B Ray;;;;
Supporting code review by automatic detection of potentially buggy changes;M Fejzer, M Burzańska;;;;
Extracting and studying the Logging-Code-Issue-Introducing changes in Java-based large-scale open source software systems;B Chen, ZMJ Jiang;Logging Code Change-based SZZ;-;;
A preliminary evaluation of text-based and dependency-based techniques for determining the origins of bugs;M Roper;;;;
Better data labelling with emblem (and how that impacts defect prediction);H Tu, Z Yu, T Menzies;;;;
Snoring: a noise in defect prediction datasets;D Falessi;;;;
Large-scale manual validation of bugfixing changes;S Herbold, A Trautsch, B Ledel;;;;
Are Code smells the root cause of faults? A continuous experimentation approach;V Lenarduzzi;;;;
Identifying Supplementary Bug-fix Commits;L Chen, X Mao;;;;
Why Did This Reviewed Code Crash? An Empirical Study of Mozilla Firefox;L An, F Khomh, S Mcintosh;;;;https://github.com/swatlab/crash_review
Feature-oriented defect prediction;S Strüder, M Mukelabai, D Strüber;unnamed;https://bitbucket.org/easelab/onlineappendixdefectpred;;
SZZ Unleashed: Bug Prediction on the Jenkins Core Repository (Open Source Implementations of Bug Prediction Tools on Commit Level);K Berg, O Svensson;;https://github.com/wogscpar/SZZUnleashed;;
Locating Bug IDs and Development Logs in Open Source Software (OSS) projects: An Experience Report;BA Romo, A Capiluppi;;;;
On the relationship between refactoring actions and bugs: a differentiated replication;M Di Penta, G Bavota, F Zampetti - Proceedings of the 28th ACM Joint …, 2020 - dl.acm.org;;;;
Automatic Recovery of Root Causes from Bug-Fixing Changes.(2013);F Thung, D LO;;;;
IMPROVING SOFTWARE QUALITY WITH SOFTWARE ERROR PREDICTION;T Taipale - 2015 - jultika.oulu.fi;;;;
What could the source code history tell UsAbout errors;LHV Amaral;;https://github.com/wogscpar/SZZUnleashed;;
Evaluation of Attention Mechanisms for Just-In-Time Software Defect Prediction;I Navarro, A Yaroslava - 2020 - diva-portal.org;;;;
Analyzing how the bugs are injected into the source code.;G Rodrıguez-Pérez;;;;
Cross-Sub-Project Just-in-Time Defect Prediction on Multi-Repo Projects;IY Ko;;;;
Fault-insertion and fault-fixing: analysing developer activity over time;D Bowes, G Destefanis, T Hall;unnamed;https://bitbucket.org/giuseppedestefanis/promise2020;;
The Relation of Test-Related Factors to Software Quality: A Case Study on Apache Systems;F Pecorelli, F Palomba, A De Lucia;;;;https://figshare.com/s/b879d0c891f1423f4935
How (Not) to Find Bugs: The Interplay Between Merge Conflicts, Co-Changes, and Bugs;L Amaral, MC Oliveira, W Luz;;https://github.com/danielcalencar/raszzprime;;
Towards an Empirical Model to Identify When Bugs are Introduced;G Rodríguez Pérez;;;;
Finding bugs in source code using commonly available development metadata;D Cook;;;;
BugVis: Commit Slicing for Fault Visualisation;D Bowes, J Petrić, T Hall;;;;
Investigating the Practicality of Just-in-time Defect Prediction with Semi-supervised Learning on Industrial Commit Data;A Syed - 2019 - diva-portal.org;;;;
Large-Scale Manual Validation of Bug Fixing Commits: A Fine-grained Analysis of Tangling;S Herbold, A Trautsch, B Ledel;;;;https://github.com/sherbold/replication-kit-2020-line-validation
Evaluating SZZ Implementations Through a Developer-informed Oracle;L Pascarella, S Scalabrino, G Bavota;;https://github.com/wogscpar/SZZUnleashed,https://github.com/clowee/OpenSZZ;;
Analyzing Corrective Maintenance using Change Coupled Clusters at Fix-inducing Changes;AZ Sadiq, A Kabir, PS Akash;;;;
OpenSZZ: A Free, Open-Source, Web-Accessible Implementation of the SZZ Algorithm;L Pellegrini, V Lenarduzzi, D Taibi;OpenSZZ;https://github. com/clowee/OpenSZZ;;
Static source code metrics and static analysis warnings for fine-grained just-in-time defect prediction;A Trautsch, S Herbold;;;;
Assessing the Bug-Proneness of Refactored Code: Longitudinal Multi-Project Studies;IV Ferreira;;;;
Investigating the Techniques to Detect and Reduce Bug Inducing Commits During Change Operations in Software Systems;M Nadim;;;;
Watch out for Extrinsic Bugs! A Case Study of their Impact in Just-In-Time Bug Prediction Models on the OpenStack project;M Nagappan;;;;
Effort-aware just-in-time defect identification in practice: a case study at Alibaba;M Yan, X Xia, Y Fan, D Lo, AE Hassan;;;;
On the Fault Proneness of SonarQube Technical Debt Violations: A comparison of eight Machine Learning Techniques.;V Lenarduzzi, F Lomio, D Taibi, H Huttunen;;;;
A dynamical quality model to continuously monitor software maintenance;V Lenarduzzi, D Taibi, D Tosi;;;;
Fault Aware Software Engineering (FASE) Reducing Code Faults by Controlling Developer Characteristics;M Betrand - Proceedings of the Evaluation and Assessment on …, 2019 - dl.acm.org;;;;
Enhancing the SZZ Algorithm to Deal with Refactoring Changes;EB Campos Neto;;https://github.com/danielcalencar/ra-szz, https://github.com/danielcalencar/ma-szz;;
Improving the quality of bug data in software repositories;BR Auwal;;;;
Research on Software Project Developer Behaviors with K-means Clustering Analysis;X Li;;OpenSZZ;;
CLEVER: combining code metrics with clone detection for just-in-time fault prevention and resolution in large industrial projects;M Nayrolles, A Hamou-Lhadj;CLEVER;https://github.com/MathieuNls/clever-challenge;;
Broadcast vs. unicast review technology: Does it matter?;F Armstrong, F Khomh, B Adams;;;;
JITO: a tool for just-in-time defect identification and localization;M Yan, X Xia, Y Fan;;RA-SZZ;;
Predicting risk of pre-release code changes with checkinmentor;A Tarvo, N Nagappan, T Zimmermann;;;;
Towards surgically-precise technical debt estimation: early results and research roadmap;V Lenarduzzi, A Martini, D Taibi;;;;
On the Impact of Multi-language Development in Machine Learning Frameworks;M Grichi, EE Eghan, B Adams;;;;
Performance tuning for automotive software fault prediction;H Altinger, S Herbold, F Schneemann… - 2017 IEEE 24th …, 2017 - ieeexplore.ieee.org;;;;
Does chronology matter in JIT defect prediction? A Partial Replication Study;H Jahanshahi, D Jothimani, A Başar;;;;
Test-related factors and post-release defects: an empirical study;F Pecorelli;;;;
HASPO: Harmony Search-Based Parameter Optimization for Just-in-Time Software Defect Prediction in Maritime Software;J Kang, D Ryu, J Baik;;;;
Why Security Defects Go Unnoticed during Code Reviews? A Case-Control Study of the Chromium OS Project;R Paul, AK Turzo, A Bosu;;;;
Machine Learning and SonarQube KPIs to Predict Increasing Bug Resolution Times;T Gustafsson;;;;
A Multi-source Machine Learning Approach to Predict Defect Prone Components.;P Ardimento, ML Bernardi, M Cimitile;;;;
Fault Prediction in Android Systems through AI;K Bassuday, M Ahmed;;;;
How Well Just-In-Time Defect Prediction Techniques Enhance Software Reliability?;W Zheng;;Unleashed;;
Review dynamics and their impact on software quality;P Thongtanunam, AE Hassan;;;;
Learning GENERAL Principles from Hundreds of Software Projects;S Majumder, R Krishna, T Menzies;;;;
Just-in-time defect identification and localization: A two-phase framework;M Yan, X Xia, Y Fan, AE Hassan;RA-SZZ;https://github.com/MengYan1989/JIT-DIL;;
On the Fault Proneness of SonarQube Technical Debt Violations. An empirical study;AA Janes;;;;
Source code quality in connection to self-admitted technical debt;A Hrynko - 2020 - diva-portal.org;;;;
A Strategy for Cross-Project Defect Prediction Models in Industry;D Gustafsson, E Pihl;;;;
WARNINGSGURU-Analysing historical commits, augmenting software bug prediction models with warnings and a user study;LP Quérel;WarningsGuru;https://github.com/louisq/warningsguru;;
PerfJIT: Test-level Just-in-time Prediction for Performance Regression Introducing Commits;J Chen, W Shang, E Shihab;;;;
Improving Bug Triaging Using Software Analytics;L An;;;;
On the Impact of Affect in Software Engineering;P Tourani;;;;
Linguistic Anti-Patterns: Impact Analysis on Code Quality;Z Kermansaravi;;;;
Are Bug Reports Enough for Text Retrieval-Based Bug Localization?;C. Mills, J. Pantiuchina, E. Parra, G. Bavota, and S. Haiduc;;;unnamed;https://www.cs.fsu.edu/~serene/mills_icsme_18_bugs/
Defects4J: A Database of Existing Faults to Enable Controlled Testing Studies for Java Programs;René Just, Darioush Jalali, and Michael D. Ernst;;;Defects4J;https://github.com/rjust/defects4j
BugsJS: a Benchmark of JavaScript Bugs;P. Gyimesi, B. Vancsics, A. Stocco, D. Mazinanian, A. Beszedes, R. Ferenc, and A. Mesbah;;;BugsJS;https://github.com/BugsJS/bug-dataset
The ManyBugs and IntroClass Benchmarks for Automated Repair of C Programs;Claire Le Goues, Neal Holtschulte, Edward K. Smith, Yuriy Brun, Premkumar Devanbu, Stephanie Forrest, Westley Weimer;;;ManyBugs;https://repairbenchmarks.cs.umass.edu/
BugSwarm: Mining and Continuously Growing a Dataset of Reproducible Failures and Fixes;David A. Tomassi, Naji Dmeiri, Yichen Wang, Antara Bhowmick, Yen-Chuan Liu, Premkumar T. Devanbu, Bogdan Vasilescu;;;BugSwarm;http://www.bugswarm.org/